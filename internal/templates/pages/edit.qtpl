{% import "cms/internal/models" %}
{% import "cms/internal/templates/layouts" %}
{% import "strings" %}

{% code
    // EditData struct is defined in models package
    type EditData = models.EditData
%}

// EditPage renders the content editing/creation form.
{% func EditPage(data *EditData) %}
    {% code
        pageContent := func() string {
            var sb strings.Builder
            actionURL := "/api/content"
            method := "POST"
            pageTitle := "Create New Content"
            if !data.IsNew {
                actionURL = "/api/content/" + data.Item.ID
                method = "PUT"
                pageTitle = "Edit: " + data.Item.Title
            }

            sb.WriteString(`<div class="bg-white p-8 rounded shadow-md w-full max-w-2xl mx-auto" x-data="contentForm()">
                <h1 class="text-2xl font-bold mb-6">`)
            sb.WriteString(pageTitle)
            sb.WriteString(`</h1>
                
                <form @submit.prevent="submitForm('`)
            sb.WriteString(actionURL)
            sb.WriteString(`', '`)
            sb.WriteString(method)
            sb.WriteString(`')">
                    <div class="mb-4">
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                        <input type="text" id="title" name="title" x-model="formData.title" required class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>

                    <div class="mb-4">
                        <label for="slug" class="block text-sm font-medium text-gray-700 mb-1">Slug</label>
                        <input type="text" id="slug" name="slug" x-model="formData.slug" pattern="^[a-z0-9]+(?:-[a-z0-9]+)*$" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <p class="text-xs text-gray-500 mt-1">Optional. If empty, one will be generated. Use lowercase letters, numbers, and hyphens.</p>
                    </div>

                    <div class="mb-4">
                        <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select id="status" name="status" x-model="formData.status" class="w-full px-3 py-2 border border-gray-300 rounded bg-white focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="draft">Draft</option>
                            <option value="published">Published</option>
                            <!-- Add other statuses if needed e.g., archived -->
                        </select>
                    </div>
                    
                    <div class="mb-6">
                        <label for="content" class="block text-sm font-medium text-gray-700 mb-1">Content</label>
                        <textarea id="content" name="content" x-model="formData.content" rows="10" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
                        <!-- Consider adding a WYSIWYG editor here later -->
                    </div>

                    <!-- Hidden fields for IDs, timestamps will be handled server-side -->
                    <!-- <input type="hidden" name="id" :value="formData.id"> -->

                    <div class="flex items-center justify-between">
                        <button type="submit" :disabled="loading" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
                            <span x-show="!loading">Save Content</span>
                            <span x-show="loading">Saving...</span>
                            <!-- Basic spinner icon -->
                            <svg x-show="loading" class="animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </button>
                        <a href="/content" class="text-sm text-gray-600 hover:text-gray-900">Cancel</a>
                    </div>
                    <p x-show="message" :class="{ 'text-green-600': success, 'text-red-600': !success }" class="mt-4 text-sm" x-text="message"></p>
                </form>
            </div>

            <script>
                function contentForm() {
                    return {
                        formData: {
                            id: `)
            if !data.IsNew {
                sb.WriteString("`" + data.Item.ID + "`")
            } else {
                sb.WriteString(`null`)
            }
            sb.WriteString(`,
                            title: `)
            if !data.IsNew {
                sb.WriteString("`" + strings.ReplaceAll(data.Item.Title, "`", "\\`") + "`")
            } else {
                sb.WriteString(`''`)
            }
            sb.WriteString(`,
                            slug: `)
            if !data.IsNew {
                sb.WriteString("`" + strings.ReplaceAll(data.Item.Slug, "`", "\\`") + "`")
            } else {
                sb.WriteString(`''`)
            }
             sb.WriteString(`,
                            status: `)
            if !data.IsNew {
                 sb.WriteString("`" + data.Item.Status + "`")
             } else {
                 sb.WriteString(`'draft'`)
             }
             sb.WriteString(`,
                            content: `)
            if !data.IsNew {
                // Escape backticks and backslashes for JS template literal
                escapedContent := strings.ReplaceAll(data.Item.Content, "\\", "\\\\")
                escapedContent = strings.ReplaceAll(escapedContent, "`", "\\`")
                 sb.WriteString("`" + escapedContent + "`")
             } else {
                 sb.WriteString(`''`)
             }
            sb.WriteString(`
                        },
                        loading: false,
                        message: '',
                        success: false,

                        async submitForm(url, method) {
                            this.loading = true;
                            this.message = '';
                            this.success = false;
                            
                            // Basic slug generation if slug is empty
                            if (!this.formData.slug && this.formData.title) {
                                this.formData.slug = this.formData.title.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
                            }

                            try {
                                const response = await fetch(url, {
                                    method: method,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(this.formData)
                                });

                                if (!response.ok) {
                                    const errorText = await response.text();
                                    throw new Error(response.statusText + ": " + errorText);
                                }
                                
                                this.success = true;
                                this.message = 'Content saved successfully!';

                                // If it was a POST (create), redirect to the edit page of the new item
                                if (method === 'POST' && response.status === 201) {
                                     const result = await response.json(); // Expecting {id: "newId"}
                                     if(result.id) {
                                        window.location.href = '/content/' + result.id + '/edit?created=true'; 
                                     } else {
                                         // Fallback redirect if ID not found
                                         window.location.href = '/content?saved=true';
                                     }
                                } else {
                                     // For PUT or other cases, maybe just show message or redirect to list
                                     // Optionally redirect after a short delay
                                     setTimeout(() => { window.location.href = '/content?saved=true'; }, 1500); 
                                }

                            } catch (error) {
                                console.error('Form submission error:', error);
                                this.success = false;
                                this.message = 'Error saving content: ' + error.message;
                            } finally {
                                this.loading = false;
                            }
                        }
                    }
                }
                 // Check for query params on load to show messages
                 document.addEventListener('alpine:init', () => {
                    const params = new URLSearchParams(window.location.search);
                    const form = Alpine.find(document.querySelector('[x-data="contentForm()"]'));
                    if (params.has('created')) {
                         if(form) { form.message = 'Content created successfully!'; form.success = true; }
                    } else if (params.has('saved')) {
                        if(form) { form.message = 'Content saved successfully!'; form.success = true; }
                    }
                    // Remove query params after showing message
                    if (params.has('created') || params.has('saved')) {
                        window.history.replaceState({}, document.title, window.location.pathname);
                    }
                })
            </script>
        `)
            return sb.String()
        }
    %}
    {%s= layouts.BaseLayout(data, pageContent) %}
{% endfunc %} 