// Code generated by qtc from "list.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line internal/templates/pages/list.qtpl:1
package pages

//line internal/templates/pages/list.qtpl:1
import "cms/internal/models"

//line internal/templates/pages/list.qtpl:2
import "cms/internal/templates/layouts"

//line internal/templates/pages/list.qtpl:3
import "strings"

//line internal/templates/pages/list.qtpl:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line internal/templates/pages/list.qtpl:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line internal/templates/pages/list.qtpl:6
// ListData struct is defined in models package
type ListData = models.ListData

// ListPage renders the content listing page.

//line internal/templates/pages/list.qtpl:11
func StreamListPage(qw422016 *qt422016.Writer, data *ListData) {
//line internal/templates/pages/list.qtpl:11
	qw422016.N().S(`
    `)
//line internal/templates/pages/list.qtpl:13
	pageContent := func() string {
		var sb strings.Builder
		sb.WriteString(`<div class="px-4 sm:px-6 lg:px-8">
                <div class="sm:flex sm:items-center">
                    <div class="sm:flex-auto">
                        <h1 class="text-base font-semibold leading-6 text-gray-900">Content Items</h1>
                        <p class="mt-2 text-sm text-gray-700">A list of all the content items in the database.</p>
                    </div>
                    <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
                        <a href="/content/new" class="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Add Content</a>
                    </div>
                </div>
                <div class="mt-8 flow-root">
                    <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                        <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead>
                                    <tr>
                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">Title</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Updated At</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-0">
                                            <span class="sr-only">Edit</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
            `)

		if len(data.Items) == 0 {
			sb.WriteString(`<tr><td colspan="4" class="whitespace-nowrap py-4 pl-4 pr-3 text-sm text-gray-500 sm:pl-0">No content items found.</td></tr>`)
		} else {
			for _, item := range data.Items {
				sb.WriteString(`<tr>
                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-0"><a href="/content/`)
				sb.WriteString(item.ID)
				sb.WriteString(`" class="text-indigo-600 hover:text-indigo-900">`)
				sb.WriteString(item.Title)
				sb.WriteString(`</a></td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">`)
				sb.WriteString(item.Status)
				sb.WriteString(`</td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">`)
				sb.WriteString(item.UpdatedAt.Format("2006-01-02 15:04"))
				sb.WriteString(`</td>
                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
                            <a href="/content/`)
				sb.WriteString(item.ID)
				sb.WriteString(`/edit" class="text-indigo-600 hover:text-indigo-900">Edit<span class="sr-only">, `)
				sb.WriteString(item.Title)
				sb.WriteString(`</span></a>
                            <!-- Add delete functionality later if needed -->
                        </td>
                    </tr>`)
			}
		}

		sb.WriteString(`
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>`)
		return sb.String()
	}

//line internal/templates/pages/list.qtpl:79
	qw422016.N().S(`
    `)
//line internal/templates/pages/list.qtpl:80
	qw422016.N().S(layouts.BaseLayout(data, pageContent))
//line internal/templates/pages/list.qtpl:80
	qw422016.N().S(`
`)
//line internal/templates/pages/list.qtpl:81
}

//line internal/templates/pages/list.qtpl:81
func WriteListPage(qq422016 qtio422016.Writer, data *ListData) {
//line internal/templates/pages/list.qtpl:81
	qw422016 := qt422016.AcquireWriter(qq422016)
//line internal/templates/pages/list.qtpl:81
	StreamListPage(qw422016, data)
//line internal/templates/pages/list.qtpl:81
	qt422016.ReleaseWriter(qw422016)
//line internal/templates/pages/list.qtpl:81
}

//line internal/templates/pages/list.qtpl:81
func ListPage(data *ListData) string {
//line internal/templates/pages/list.qtpl:81
	qb422016 := qt422016.AcquireByteBuffer()
//line internal/templates/pages/list.qtpl:81
	WriteListPage(qb422016, data)
//line internal/templates/pages/list.qtpl:81
	qs422016 := string(qb422016.B)
//line internal/templates/pages/list.qtpl:81
	qt422016.ReleaseByteBuffer(qb422016)
//line internal/templates/pages/list.qtpl:81
	return qs422016
//line internal/templates/pages/list.qtpl:81
}
